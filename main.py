
import streamlit as st
import os
import requests
from gtts import gTTS
import tempfile
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

if not GEMINI_API_KEY:
    st.error("‚ùå GEMINI_API_KEY not found in .env file")
    st.stop()

# Corrected API base URL for Gemini 1.5 Flash and generateContent
BASE_URL = "https://generativelanguage.googleapis.com/v1/models/"
API_URL = f"{BASE_URL}gemini-1.5-flash:generateContent?key={GEMINI_API_KEY}"

def translate_text(text: str, target_lang: str) -> str:
    # Prompt adjusted to handle both single words and sentences
    # We'll rely on the model's intelligence to handle the length
    prompt_text = f"Translate the following text into {target_lang}. Provide only the translated text, without any extra sentences or explanations:\n\n{text}"

    payload = {
        "contents": [
            {
                "parts": [
                    {"text": prompt_text}
                ]
            }
        ],
        "generationConfig": {
            "temperature": 0.3, # Lower temperature for more precise output
            "candidate_count": 1,
            "max_output_tokens": 256 # Increased max tokens to allow for sentences
        }
    }

    headers = {
        "Content-Type": "application/json"
    }

    response = requests.post(API_URL, headers=headers, json=payload)

    if response.status_code == 200:
        try:
            # .strip() to remove leading/trailing whitespace, often generated by AI
            return response.json()['candidates'][0]['content']['parts'][0]['text'].strip()
        except Exception as e:
            return f"‚ö†Ô∏è Unexpected response structure: {e}\nFull response: {response.text}"
    else:
        return f"‚ùå API Error {response.status_code}: {response.text}"

def speak_text(text: str, lang_code: str = 'en'):
    try:
        lang_code_map = {
            "English": "en",
            "Urdu": "ur",
            "Arabic": "ar",
            "Spanish": "es",
            "French": "fr",
            "German": "de",
            "Chinese": "zh-CN", # Simplified Chinese
            "Hindi": "hi",
            "Turkish": "tr",
            "Rooman Urdu": "Ru"
        }
        gtts_lang = lang_code_map.get(lang_code, 'en')

        # gTTS might have issues with very long texts, consider adding a limit if needed for long sentences
        tts = gTTS(text=text, lang=gtts_lang)
        with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as tmp_file:
            tts.save(tmp_file.name)

        with open(tmp_file.name, 'rb') as f:
            st.audio(f.read(), format='audio/mp3')

        os.remove(tmp_file.name)
    except Exception as e:
        st.error(f"‚ùå Voice error: {e}")

st.set_page_config(page_title="üåê AI Translator", page_icon="üåç")
st.title("‚ù§Ô∏è AI Translator by Hamza Shafi")
# --- UI TEXT IMPROVEMENT ---
st.markdown("Instantly translate text and listen to the translation with our AI-powered tool!")

# Changed back to text_area for better multi-line input experience
user_text = st.text_area("‚úçÔ∏è Enter text here:", height=150)
# --- END UI TEXT IMPROVEMENT ---

target_language = st.selectbox("üåç Select target language:", ["English", "Urdu", "Arabic", "Spanish", "French", "German", "Chinese", "Hindi", "Turkish","Roman Urdu"])

if st.button("üöÄ Translate"):
    if not user_text.strip():
        st.warning("‚ö†Ô∏è Please enter some text to translate.")
    else:
        with st.spinner("Translating..."):
            translation = translate_text(user_text, target_language)
            st.success(f"‚úÖ Translated ({target_language}):")
            st.write(translation)
            speak_text(translation, target_language)

st.markdown("---")
st.markdown("üîó Made with ‚ù§Ô∏è by **Hamza Shafi**")